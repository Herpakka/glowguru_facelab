# -*- coding: utf-8 -*-
"""Untitled2.ipynb

Automatically generated by Colaboratory.

Original file is located at
    https://colab.research.google.com/drive/1fK0YNArjaHqjfRZv2cToifOLX93rYl4r
"""

%pip install mediapipe==0.8.9.1
import mediapipe as mp
import matplotlib.pyplot as plt
import cv2
import numpy as np

img = cv2.imread("/content/80.jpg")

plt.axis('off')
plt.imshow(img[:,:,::-1])

mp_face_mesh = mp.solutions.face_mesh
face_mesh = mp_face_mesh.FaceMesh(static_image_mode=True)

result = face_mesh.process(cv2.cvtColor(img, cv2.COLOR_BGR2RGB))
landmarks = result.multi_face_landmarks[0]

face_oval = mp_face_mesh.FACEMESH_FACE_OVAL

import pandas as pd
df = pd.DataFrame(list(face_oval), columns = ["p1","p2"])
print(df.head(5))

routes_idx = []

p1 = df.iloc[0]["p1"]
p2 = df.iloc[0]["p2"]

for i in range(0, df.shape[0]):
  # print(p1, p2)
  obj = df[df["p1"] == p2]
  p1 = obj["p1"].values[0]
  p2 = obj["p2"].values[0]

  route_idx = []
  route_idx.append(p1)
  route_idx.append(p2)
  routes_idx.append(route_idx)

# for route_idx in routes_idx:
#   print(f"draw a line between {route_idx[0]}th landmark point to {route_idx[1]}th landmark point")
# print(len(routes_idx))

routes = []

for source_idx, target_idx in routes_idx:

    source = landmarks.landmark[source_idx]
    target = landmarks.landmark[target_idx]

    relative_source = (int(img.shape[1] * source.x), int(img.shape[0] * source.y))
    relative_target = (int(img.shape[1] * target.x), int(img.shape[0] * target.y))

    #cv2.line(img, relative_source, relative_target, (255, 255, 255), thickness = 2)

    routes.append(relative_source)
    routes.append(relative_target)

"""left eye"""

left_e_mesh = mp.solutions.face_mesh
le_mesh = left_e_mesh.FaceMesh(static_image_mode=True)

result2 = le_mesh.process(cv2.cvtColor(img, cv2.COLOR_BGR2RGB))
landmarks2 = result2.multi_face_landmarks[0]

Left_eye = mp_face_mesh.FACEMESH_LEFT_EYE

import pandas as pd
df = pd.DataFrame(list(Left_eye), columns = ["p1","p2"])
print(df.head(5))

LeftE_routes_idx = []

p1 = df.iloc[0]["p1"]
p2 = df.iloc[0]["p2"]

for i in range(0, df.shape[0]):
  # print(p1, p2)
  obj = df[df["p1"] == p2]
  p1 = obj["p1"].values[0]


  LeftE_route_idx = []
  LeftE_route_idx.append(p1)
  LeftE_route_idx.append(p2)
  LeftE_routes_idx.append(LeftE_route_idx)

# for route_idx in routes_idx:
#   print(f"draw a line between {route_idx[0]}th landmark point to {route_idx[1]}th landmark point")
# print(len(routes_idx))

"""Output"""

mask = np.zeros((img.shape[0], img.shape[1]))
mask = cv2.fillConvexPoly(mask, np.array(routes), 1)
mask = mask.astype(bool)

out = np.zeros_like(img)
out[mask] = img[mask]

plt.axis('off')
plt.imshow(out[...,::-1])